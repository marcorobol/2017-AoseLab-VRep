import unitn.aose.warehousesim.api.ITellerMachine;
import unitn.aose.warehousesim.api.AreaState;
import unitn.aose.warehousesim.api.ITicket;
import unitn.aose.warehousesim.data.Box;
import unitn.aose.warehousesim.data.Area;
import unitn.aose.warehousesim.api.data.Ticket;
import unitn.aose.warehousesim.data.StorageArea;

// --- WAREHOUSE TEST1 ---
// In this test a box has to be stored in the deposit.
// A free storage are is available on the same rail of the pickup area.
// The test succeeds if:
// 1. the ticket is set to done,
// 2. the box is placed in a storage area
// 3. the operation is completed in 20 seconds
// -----------------------
final String tellerMachine = "PickAreaA";
final long timeout = 20000; //ms

//setup warehouse
Box box1 = warehouse.createBox(tellerMachine);
ITellerMachine t1 = warehouse.getTellerMachine(tellerMachine);
System.out.println("# "+box1+" created at "+t1);

//start storage procedure
ITicket ticket = t1.requestDeposit();
if(null == ticket){
	System.err.println("! cannot elaborate deposit");
	return;
}

//waiting for the ticket
System.out.println("> waiting for "+box1+" deposit: tracking number "+ticket.getCode()+ " (state "+ticket.getState()+")");
ticketManager.waitForTicket(ticket, timeout);
if(ticket.getState()!=Ticket.TICKET_DONE){
	System.err.println("! ticket expired or not done");
	return;
}

// final verification
System.out.println("> "+ticket.getCode()+" marked as done");
a = box1.getArea();
if(!warehouse.isAStorageArea(a)){
	System.err.println("! "+box1+" not correctly stored ("+a+" is not a storage area)");
}else{
	System.out.println("> "+box1+" stored at "+a);
}