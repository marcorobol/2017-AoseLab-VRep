<BAPI_Plan
    :version  52
    :superclass  "Plan"
    :doc
	<BAPI_Text
	    :hard_lab  "Doc:"
	    :lab  "Documentation"
	    :val  `/**
 * 
 */`
	>
    :name  "RobotTestPlan"
    :filename  "unitn/aose/warehousesim/agent/RobotTestPlan.gplan"
    :type  "aos.jack.ed.Plan"
    :java
	<BAPI_Java
	    :pkg
		<BAPI_TextLine
		    :val  "unitn.aose.warehousesim.agent"
		>
	    :imports
		(
		    <BAPI_TextLine
			:val  "unitn.aose.warehousesim.api.TicketManager"
		    >
		    <BAPI_TextLine
			:val  "unitn.aose.warehousesim.api.data.Ticket"
		    >
		)
	>
    :handled_event
	<BAPI_FileRef
	    :name  "StartRobotsEvent"
	    :filename  "unitn/aose/warehousesim/agent/StartRobotsEvent.gevent"
	    :label  "handles StartRobotsEvent"
	    :type  "aos.jack.ed.Event"
	    :java
		<BAPI_Java
		    :pkg
			<BAPI_TextLine
			>
		>
	    :refType  "handles"
	    :refName  "ev"
	    :dropHandlerName  "NamedEvent.drop"
	    :allowsReplace  :true
	>
    :relevant
	<BAPI_Text
	    :lab  "Relevance"
	    :val  `static boolean relevant(<<HandlesType>> ev)
{
    return true;
}
`
	    :init  `static boolean relevant(<<HandlesType>> ev)
{
    return true;
}
`
	    :isLabelEditable  :false
	>
    :context
	<BAPI_Text
	    :lab  "Context"
	    :val  `context()
{
    true;
}
`
	    :init  `context()
{
    true;
}
`
	    :isLabelEditable  :false
	>
    :databases
	(
	    <BAPI_FileRef
		:name  "AreaInfo"
		:filename  "unitn/aose/warehousesim/agent/AreaInfo_-rail.gnd"
		:label  "uses AreaInfo"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "rail"
		:dropHandlerName  "NamedData.drop"
	    >
	    <BAPI_FileRef
		:name  "PerceptionInfo"
		:filename  "unitn/aose/warehousesim/agent/PerceptionInfo_-perception.gnd"
		:label  "uses PerceptionInfo"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "perception"
		:dropHandlerName  "NamedData.drop"
	    >
	    <BAPI_FileRef
		:name  "DataLog"
		:filename  "unitn/aose/warehousesim/agent/DataLog_-dataLog.gnd"
		:label  "uses DataLog"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "dataLog"
		:dropHandlerName  "NamedData.drop"
	    >
	    <BAPI_FileRef
		:name  "RobotData"
		:filename  "unitn/aose/warehousesim/agent/RobotData_-myRobot.gnd"
		:label  "uses RobotData"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "myRobot"
	    >
	    <BAPI_FileRef
		:name  "RobotInfo"
		:filename  "unitn/aose/warehousesim/agent/RobotInfo_-robotInfo.gnd"
		:label  "uses RobotInfo"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "robotInfo"
	    >
	    <BAPI_FileRef
		:name  "RobotsPerception"
		:filename  "unitn/aose/warehousesim/agent/RobotsPerception_-otherRobots.gnd"
		:label  "uses RobotsPerception"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "otherRobots"
		:dropHandlerName  "NamedData.drop"
	    >
	    <BAPI_FileRef
		:name  "BoxesPerception"
		:filename  "unitn/aose/warehousesim/agent/BoxesPerception_-boxes.gnd"
		:label  "uses BoxesPerception"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "boxes"
		:dropHandlerName  "NamedData.drop"
	    >
	)
    :reasoning_methods
	(
	    <"BAPI_Text#aos.jack.ed.ReasoningMethod"
		:lab  "body"
		:val  `body()
{
    dataLog.log("starting " + myRobot.getName()+" test plan (pos: "+myRobot.getPosition()+")");
    if(myRobot.getPosition()>1){
        myRobot.moveBackward();
        dataLog.log("moving backward!");
    }else{
        myRobot.moveForward();
    }
    dataLog.log("waiting for "+myRobot.getName()+" @ 1");
    while(myRobot.getPosition()!=1){
        //keep moving until at 1
        //dataLog.log(myRobot.getName()+" @ "+myRobot.getPosition());
        @sleep(0.5);
    }
    stopRobot();
    @sleep(10);
    myRobot.loadLeft();
    dataLog.log(myRobot.getName()+" loading left @ "+myRobot.getPosition());
    @sleep(10);
    myRobot.moveForward();
    dataLog.log("waiting for "+myRobot.getName()+" @ 4");
    while(myRobot.getPosition()!=4){
        //keep moving until at 4
        //dataLog.log(myRobot.getName()+" @ "+myRobot.getPosition());
        @sleep(0.5);
    }
    stopRobot();
    @sleep(10);
    myRobot.unloadRight();
    dataLog.log(myRobot.getName()+" unloading right @ "+myRobot.getPosition());
    //mission accomplished!
    @reply(ev, null);
    
    //return to base
    myRobot.moveBackward();
    @sleep(10);
    dataLog.log("waiting for "+myRobot.getName()+" @ 0");
    while(myRobot.getPosition()!=0){
        //keep moving until at 3
        //dataLog.log(myRobot.getName()+" @ "+myRobot.getPosition());
        @sleep(0.5);
    }
    stopRobot();
}
`
	    >
	    <"BAPI_Text#aos.jack.ed.ReasoningMethod"
		:lab  "stopRobot"
		:val  `stopRobot(){
    myRobot.stopHere();
    logical int $ms; //monitor movement state and wait for the robot to be stopped
    @wait_for(robotInfo.getMovement($ms) && $ms.as_int()==RobotData.MS_STOP);
    dataLog.log(myRobot.getName()+" stopped @ "+myRobot.getPosition());
}
`
	    >
	)
>
