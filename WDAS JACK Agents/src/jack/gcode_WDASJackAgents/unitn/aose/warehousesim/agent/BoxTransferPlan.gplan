<BAPI_Plan
    :version  52
    :superclass  "Plan"
    :doc
	<BAPI_Text
	    :hard_lab  "Doc:"
	    :lab  "Documentation"
	    :val  `/**
* Makes the robot to bring a box from an area to another.
* The area is identified by its position and side (right or left).
* 
* The transfer is made of 4 steps:
* 1. move to "from" position (implies on the same rail)
* 2. load from the "from" side (right or left)
* 3. move to "to" position
* 4. unload to the "to" side (right or left)
* 
* When the transfer is completed the plan will reply to the triggering event.
**/`
	>
    :name  "BoxTransferPlan"
    :filename  "unitn/aose/warehousesim/agent/BoxTransferPlan.gplan"
    :type  "aos.jack.ed.Plan"
    :java
	<BAPI_Java
	    :pkg
		<BAPI_TextLine
		    :val  "unitn.aose.warehousesim.agent"
		>
	>
    :handled_event
	<BAPI_FileRef
	    :name  "BoxTransferEvent"
	    :filename  "unitn/aose/warehousesim/agent/BoxTransferEvent.gevent"
	    :label  "handles BoxTransferEvent"
	    :type  "aos.jack.ed.Event"
	    :java
		<BAPI_Java
		    :pkg
			<BAPI_TextLine
			>
		>
	    :refType  "handles"
	    :refName  "ev"
	    :dropHandlerName  "NamedEvent.drop"
	    :allowsReplace  :true
	>
    :relevant
	<BAPI_Text
	    :lab  "Relevance"
	    :val  `static boolean relevant(<<HandlesType>> ev)
{
    return true;
}
`
	    :init  `static boolean relevant(<<HandlesType>> ev)
{
    return true;
}
`
	    :isLabelEditable  :false
	>
    :context
	<BAPI_Text
	    :lab  "Context"
	    :val  `context()
{
    true;
}
`
	    :init  `context()
{
    true;
}
`
	    :isLabelEditable  :false
	>
    :posted_events
	(
	    <BAPI_FileRef
		:name  "GoToPositionEvent"
		:filename  "unitn/aose/warehousesim/agent/GoToPositionEvent.gevent"
		:label  "posts GoToPositionEvent"
		:type  "aos.jack.ed.Event"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "PlanEventList.attrs"
		:refType  "posts"
		:refName  "go"
	    >
	    <BAPI_FileRef
		:name  "ResponseEvent"
		:filename  "unitn/aose/warehousesim/agent/ResponseEvent.gevent"
		:label  "sends ResponseEvent"
		:type  "aos.jack.ed.Event"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "PlanEventList.attrs"
		:refType  "sends"
		:refName  "response"
	    >
	)
    :databases
	(
	    <BAPI_FileRef
		:name  "RobotData"
		:filename  "unitn/aose/warehousesim/agent/RobotData_-myRobot.gnd"
		:label  "uses RobotData"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "myRobot"
		:dropHandlerName  "NamedData.drop"
	    >
	    <BAPI_FileRef
		:name  "DataLog"
		:filename  "unitn/aose/warehousesim/agent/DataLog_-dataLog.gnd"
		:label  "uses DataLog"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "dataLog"
		:dropHandlerName  "NamedData.drop"
	    >
	)
    :reasoning_methods
	(
	    <"BAPI_Text#aos.jack.ed.ReasoningMethod"
		:lab  "body"
		:val  `body()
{
    dataLog.log("transferring box from "+ev.fromPosition+(ev.fromRight?"r":"l")+" to "+ev.toPosition+(ev.fromRight?"r":"l"));
    //1. move to fromPosition
    @subtask(go.goToPosition(ev.fromPosition));
    //2. load on the right or left side
    if(ev.fromRight){
        myRobot.loadRight();
    }else{
        myRobot.loadLeft();
    }
    //3. move to toPosition
    @subtask(go.goToPosition(ev.toPosition));
    //4. unload on right or left side
    if(ev.toRight){
        myRobot.unloadRight();
    }else{
        myRobot.unloadLeft();
    }
    //let the coordinator know we finished the transfer
    @reply(ev, response.message("transfer completed"));
}
`
	    >
	)
>
