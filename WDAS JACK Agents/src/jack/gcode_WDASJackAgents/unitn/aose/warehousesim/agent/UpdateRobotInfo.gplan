<BAPI_Plan
    :version  52
    :superclass  "Plan"
    :doc
	<BAPI_Text
	    :hard_lab  "Doc:"
	    :lab  "Documentation"
	    :val  `/**
 * 
 */`
	>
    :name  "UpdateRobotInfo"
    :filename  "unitn/aose/warehousesim/agent/UpdateRobotInfo.gplan"
    :type  "aos.jack.ed.Plan"
    :java
	<BAPI_Java
	    :pkg
		<BAPI_TextLine
		    :val  "unitn.aose.warehousesim.agent"
		>
	    :imports
		(
		    <BAPI_TextLine
			:val  "aos.jack.util.cursor.Change"
		    >
		    <BAPI_TextLine
			:val  "unitn.aose.warehousesim.api.ICartPerception"
		    >
		    <BAPI_TextLine
			:val  "unitn.aose.warehousesim.api.data.MovementWithRespectToMe"
		    >
		)
	>
    :handled_event
	<BAPI_FileRef
	    :name  "UpdateInfo"
	    :filename  "unitn/aose/warehousesim/agent/UpdateInfo.gevent"
	    :label  "handles UpdateInfo"
	    :type  "aos.jack.ed.Event"
	    :java
		<BAPI_Java
		    :pkg
			<BAPI_TextLine
			>
		>
	    :refType  "handles"
	    :refName  "ev"
	    :dropHandlerName  "NamedEvent.drop"
	    :allowsReplace  :true
	>
    :relevant
	<BAPI_Text
	    :lab  "Relevance"
	    :val  `static boolean relevant(<<HandlesType>> ev)
{
    return true;
}
`
	    :init  `static boolean relevant(<<HandlesType>> ev)
{
    return true;
}
`
	    :isLabelEditable  :false
	>
    :context
	<BAPI_Text
	    :lab  "Context"
	    :val  `context()
{
    true;
}
`
	    :init  `context()
{
    true;
}
`
	    :isLabelEditable  :false
	>
    :databases
	(
	    <BAPI_FileRef
		:name  "CrossInfo"
		:filename  "unitn/aose/warehousesim/agent/CrossInfo_-crosses.gnd"
		:label  "uses CrossInfo"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "crosses"
		:dropHandlerName  "NamedData.drop"
	    >
	    <BAPI_FileRef
		:name  "RailInfo"
		:filename  "unitn/aose/warehousesim/agent/RailInfo_-rail.gnd"
		:label  "uses RailInfo"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "rail"
		:dropHandlerName  "NamedData.drop"
	    >
	    <BAPI_FileRef
		:name  "DataLog"
		:filename  "unitn/aose/warehousesim/agent/DataLog_-dataLog.gnd"
		:label  "uses DataLog"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "dataLog"
		:dropHandlerName  "NamedData.drop"
	    >
	    <BAPI_FileRef
		:name  "RobotInfo"
		:filename  "unitn/aose/warehousesim/agent/RobotInfo_-robotInfo.gnd"
		:label  "uses RobotInfo"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "robotInfo"
		:dropHandlerName  "NamedData.drop"
	    >
	    <BAPI_FileRef
		:name  "RobotData"
		:filename  "unitn/aose/warehousesim/agent/RobotData_-myRobot.gnd"
		:label  "uses RobotData"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "myRobot"
		:dropHandlerName  "NamedData.drop"
	    >
	    <BAPI_FileRef
		:name  "RobotPerception"
		:filename  "unitn/aose/warehousesim/agent/RobotPerception_-otherRobots.gnd"
		:label  "uses RobotPerception"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "otherRobots"
		:dropHandlerName  "NamedData.drop"
	    >
	    <BAPI_FileRef
		:name  "BoxesPerception"
		:filename  "unitn/aose/warehousesim/agent/BoxesPerception_-boxes.gnd"
		:label  "uses BoxesPerception"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "boxes"
		:dropHandlerName  "NamedData.drop"
	    >
	)
    :reasoning_methods
	(
	    <"BAPI_Text#aos.jack.ed.ReasoningMethod"
		:lab  "body"
		:val  `body()
{
    for(;true;){
        @wait_for(new Change(myRobot, false));
        
        //update self
        robotInfo.add(
            myRobot.getRail(),
            myRobot.getPosition(), 
            myRobot.getMovement(),
            myRobot.getLoadUnload(),
            myRobot.getLoadedBox());
            
        //check other robots
        for(int pwr=0; pwr<8; ++pwr){
            ICartPerception p = myRobot.getCartPerception(pwr);
            if(null != p){
                MovementWithRespectToMe mwr = (MovementWithRespectToMe)p.getMovementWithRespectToMe().get();
                String name = p.getCart().getName();
                otherRobots.add(pwr, name, RobotData.getMovementWithRespectToMe(mwr));
                dataLog.log("cart perception at "+RobotData.getPositionWithRespectToMe(pwr)+" "+name+" "+mwr);
            }else{
                otherRobots.remove(pwr);
            }
        }
        
        //check boxes
        String b = myRobot.getBoxOnLeft();
        if(null == b){
            boxes.remove(RobotData.PWR_LEFT);
        }else{
            boxes.add(RobotData.PWR_LEFT, b);
        }
        b = myRobot.getBoxOnRight();
        if(null == b){
            boxes.remove(RobotData.PWR_RIGHT);
        }else{
            boxes.add(RobotData.PWR_RIGHT, b);
        }
        
        //check crosses

        int pos = myRobot.getPosition();

        String ca = myRobot.getCrossAhead();
        String ch = myRobot.getCrossHere();
        String cb = myRobot.getCrossBehind();
        dataLog.log("crosses at "+pos+" "+ca+" "+ch+" "+cb);
        if(null != ca){
            crosses.add(myRobot.getRail(), pos+1, ca);
        }
        if(null != ch){
            crosses.add(myRobot.getRail(), pos, ch);
        }
        if(null != cb){
            crosses.add(myRobot.getRail(), pos-1, cb);
        }
        
        //check areas
        boolean isRight = false;
        boolean isStorage = true;
        String a = myRobot.getAreaOnLeft();
        if(null != a){
            rail.add(myRobot.getRail(), myRobot.getPosition(), isRight, isStorage, a, RobotData.AS_UNKNOWN);
            //the area is shared if there is a cross ahead or behind
            //... but we don't know anything about the other rail
            if(null != ca){
                rail.add(ca, -1, false, isStorage, a, RobotData.AS_UNKNOWN);
            }else if (null != cb){
                rail.add(cb, -1, false, isStorage, a, RobotData.AS_UNKNOWN);
            }
        }
        isRight = true;
        a = myRobot.getAreaOnRight();
        if(null != a){
            rail.add(myRobot.getRail(), myRobot.getPosition(), isRight, isStorage, a, RobotData.AS_UNKNOWN);
            //the area is shared if there is a cross ahead or behind
            //... but we don't know anything about the other rail
            if(null != ca){
                rail.add(ca, -1, false, isStorage, a, RobotData.AS_UNKNOWN);
            }else if (null != cb){
                rail.add(cb, -1, false, isStorage, a, RobotData.AS_UNKNOWN);
            }
        }
        checkSharedAreas();
        checkCrosses();
    }
}
`
	    >
	    <"BAPI_Text#aos.jack.ed.ReasoningMethod"
		:lab  "checkSharedAreas"
		:val  `checkSharedAreas(){
    logical String $rail;
    logical String $otherRail;
    logical String $area;
    Cursor c = rail.getSharedAreas($rail, $otherRail, $area);
    while(c.next()){
        dataLog.log("shared area "+$area.as_string()+" between "+$rail.as_string()+" and "+$otherRail.as_string());    
    }
}
`
	    >
	    <"BAPI_Text#aos.jack.ed.ReasoningMethod"
		:lab  "checkCrosses"
		:val  `checkCrosses(){
    //XXX: check crosses
    logical String $rail;
    logical int $position;
    logical String $crossedRail;
    Cursor c = crosses.get($rail, $position, $crossedRail);
    while(c.next()){
        dataLog.log("cross at "+$rail.as_string()+"@"+$position.as_int()+" > "+$crossedRail.as_string());
    }
}
`
	    >
	)
>
