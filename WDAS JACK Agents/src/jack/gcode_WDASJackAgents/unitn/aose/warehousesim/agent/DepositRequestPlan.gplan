<BAPI_Plan
    :version  52
    :superclass  "Plan"
    :doc
	<BAPI_Text
	    :hard_lab  "Doc:"
	    :lab  "Documentation"
	    :val  `/**
 * Handles a deposit request
 */`
	>
    :name  "DepositRequestPlan"
    :filename  "unitn/aose/warehousesim/agent/DepositRequestPlan.gplan"
    :type  "aos.jack.ed.Plan"
    :java
	<BAPI_Java
	    :pkg
		<BAPI_TextLine
		    :val  "unitn.aose.warehousesim.agent"
		>
	    :imports
		(
		    <BAPI_TextLine
			:val  "java.util.Iterator"
		    >
		    <BAPI_TextLine
			:val  "unitn.aose.warehousesim.api.ITellerMachine"
		    >
		    <BAPI_TextLine
			:val  "unitn.aose.warehousesim.api.ITicket"
		    >
		    <BAPI_TextLine
			:val  "unitn.aose.warehousesim.api.data.BoxRef"
		    >
		    <BAPI_TextLine
			:val  "unitn.aose.warehousesim.api.data.DepositWithdrawAreaRef"
		    >
		)
	>
    :handled_event
	<BAPI_FileRef
	    :name  "RequestEvent"
	    :filename  "unitn/aose/warehousesim/agent/RequestEvent.gevent"
	    :label  "handles RequestEvent"
	    :type  "aos.jack.ed.Event"
	    :java
		<BAPI_Java
		    :pkg
			<BAPI_TextLine
			>
		>
	    :refType  "handles"
	    :refName  "ev"
	    :dropHandlerName  "NamedEvent.drop"
	    :allowsReplace  :true
	>
    :relevant
	<BAPI_Text
	    :lab  "Relevance"
	    :val  `static boolean relevant(<<HandlesType>> ev)
{
    return ev.deposit;
}
`
	    :init  `static boolean relevant(<<HandlesType>> ev)
{
    return true;
}
`
	    :isLabelEditable  :false
	>
    :context
	<BAPI_Text
	    :lab  "Context"
	    :val  `context()
{
    true;
}
`
	    :init  `context()
{
    true;
}
`
	    :isLabelEditable  :false
	>
    :posted_events
	(
	    <BAPI_FileRef
		:name  "BoxTransferEvent"
		:filename  "unitn/aose/warehousesim/agent/BoxTransferEvent.gevent"
		:label  "sends BoxTransferEvent"
		:type  "aos.jack.ed.Event"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "PlanEventList.attrs"
		:refType  "sends"
		:refName  "transfer"
		:dropHandlerName  "NamedEvent.drop"
	    >
	)
    :databases
	(
	    <BAPI_FileRef
		:name  "AgentsToCoordinate"
		:filename  "unitn/aose/warehousesim/agent/AgentsToCoordinate_-agents.gnd"
		:label  "uses AgentsToCoordinate"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "agents"
		:dropHandlerName  "NamedData.drop"
	    >
	    <BAPI_FileRef
		:name  "CrossInfo"
		:filename  "unitn/aose/warehousesim/agent/CrossInfo_-crosses.gnd"
		:label  "uses CrossInfo"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "crosses"
		:dropHandlerName  "NamedData.drop"
	    >
	    <BAPI_FileRef
		:name  "AreaInfo"
		:filename  "unitn/aose/warehousesim/agent/AreaInfo_-areas.gnd"
		:label  "uses AreaInfo"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "areas"
		:dropHandlerName  "NamedData.drop"
	    >
	    <BAPI_FileRef
		:name  "WarehouseData"
		:filename  "unitn/aose/warehousesim/agent/WarehouseData_-myWarehouse.gnd"
		:label  "uses WarehouseData"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "myWarehouse"
		:dropHandlerName  "NamedData.drop"
	    >
	    <BAPI_FileRef
		:name  "DataLog"
		:filename  "unitn/aose/warehousesim/agent/DataLog_-dataLog.gnd"
		:label  "uses DataLog"
		:type  "aos.jack.ed.NamedData"
		:java
		    <BAPI_Java
			:pkg
			    <BAPI_TextLine
			    >
		    >
		:attrs  "ReadWriteableDBList.attrs"
		:refType  "uses"
		:refName  "dataLog"
		:dropHandlerName  "NamedData.drop"
	    >
	)
    :reasoning_methods
	(
	    <"BAPI_Text#aos.jack.ed.ReasoningMethod"
		:lab  "body"
		:val  `body()
{   
    dataLog.log("handling deposit request "+ev.ticketCode+" for box "+ev.boxName+" from "+ev.areaName);
    
    //1. find coordinates (rail, position and side) the area is on
    logical String $rail;
    logical int $pos;
    logical boolean $right;
    logical boolean $storage;
    logical int $areaState;
    logical String $box;
    //XXX: maybe this represents the context?
    Cursor rc = areas.getRail($rail, $pos, $right, $storage, ev.areaName, $areaState, $box);
    rc.next();
    
    //2. find nearest (?) robot on such rail
    logical String $agent;
    logical int $status;
    Cursor ac = agents.getAgents($agent, $status, $rail.as_string());
    ac.next();
    //TODO: bid the best agent to use
    
    //3. find nearest available storage area
    String depositArea = areas.getNearestFreeStorageArea($rail.as_string(), $pos.as_int());
    null!=depositArea; //assert depostArea not null
    logical int $depoPos;
    logical boolean $depoRight;
    logical boolean $depoStorage;
    logical int $depoState;
    logical String $depoBox;
		//let's use the same $rail got from the initial query
    Cursor dc = areas.getRail($rail, $depoPos, $depoRight, $depoStorage, depositArea, $depoState, $depoBox);
    dc.next();
    
    //4. send goal to robot to load from tellermachine and unload into storage
    dataLog.log("agent "+$agent.as_string()+" to pickup from "+$rail.as_string()+"@"+$pos.as_int()+($right.as_boolean()?"right":"left")+" and deposit at "+depositArea);

    BoxTransferEvent t = transfer.transfer($pos.as_int(), $right.as_boolean(), $depoPos.as_int(), $depoRight.as_boolean());
    @send($agent.as_string(), t);
    @wait_for(t.replied());
    ResponseEvent r = (ResponseEvent) t.getReply();
    dataLog.log("command completed with response: "+r.message);
}
`
	    >
	    <"BAPI_Text#aos.jack.ed.ReasoningMethod"
		:lab  "fail"
		:val  `fail(){
    dataLog.log("FAIL: unable to deposit!");   
}
`
	    >
	    <"BAPI_Text#aos.jack.ed.ReasoningMethod"
		:lab  "pass"
		:val  `pass(){
    dataLog.log("SUCCESS: deposit completed");
    ITicket ticket = myWarehouse.getWarehouse().getTicketManager().getTicketByCode(ev.ticketCode);
    ticket.setState(ITicket.TICKET_DONE);
}
`
	    >
	)
>
